# Generated by Django 5.2.7 on 2025-10-31 22:55

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the fellowship group', max_length=200, verbose_name='group name')),
                ('description', models.TextField(help_text="Description of the group's purpose and activities", verbose_name='description')),
                ('location', models.CharField(help_text='Meeting location or area (e.g., "Downtown Chapel, Main Street")', max_length=300, verbose_name='location')),
                ('location_type', models.CharField(choices=[('in_person', 'In Person'), ('online', 'Online'), ('hybrid', 'Hybrid')], default='in_person', max_length=20, verbose_name='location type')),
                ('member_limit', models.PositiveIntegerField(default=12, help_text='Maximum number of members allowed in the group', validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(100)], verbose_name='member limit')),
                ('is_open', models.BooleanField(default=True, help_text='Whether the group is currently accepting new members', verbose_name='accepting new members')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the group is currently active', verbose_name='is active')),
                ('photo', models.ImageField(blank=True, help_text='Group photo or banner image', null=True, upload_to='group_photos/', verbose_name='group photo')),
                ('meeting_day', models.CharField(blank=True, choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')], help_text='Primary day of weekly meetings', max_length=20, null=True, verbose_name='meeting day')),
                ('meeting_time', models.TimeField(blank=True, help_text='Time when group typically meets', null=True, verbose_name='meeting time')),
                ('meeting_frequency', models.CharField(choices=[('weekly', 'Weekly'), ('biweekly', 'Bi-weekly'), ('monthly', 'Monthly')], default='weekly', max_length=20, verbose_name='meeting frequency')),
                ('focus_areas', models.JSONField(blank=True, default=list, help_text='Areas of focus (e.g., prayer, bible study, youth, etc.)', verbose_name='focus areas')),
                ('visibility', models.CharField(choices=[('public', 'Public - Anyone can see'), ('community', 'Community - Authenticated users only'), ('private', 'Private - Invite only')], default='public', max_length=20, verbose_name='visibility')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('co_leaders', models.ManyToManyField(blank=True, help_text='Additional leaders/facilitators of the group', related_name='co_led_groups', to=settings.AUTH_USER_MODEL, verbose_name='co-leaders')),
                ('leader', models.ForeignKey(help_text='Primary leader of the group', on_delete=django.db.models.deletion.PROTECT, related_name='led_groups', to=settings.AUTH_USER_MODEL, verbose_name='group leader')),
            ],
            options={
                'verbose_name': 'Group',
                'verbose_name_plural': 'Groups',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('leader', 'Leader'), ('co_leader', 'Co-Leader'), ('member', 'Member')], default='member', max_length=20, verbose_name='role')),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('active', 'Active'), ('inactive', 'Inactive'), ('removed', 'Removed')], default='pending', max_length=20, verbose_name='status')),
                ('joined_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='joined at')),
                ('left_at', models.DateTimeField(blank=True, null=True, verbose_name='left at')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this membership', verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='group.group', verbose_name='group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_memberships', to=settings.AUTH_USER_MODEL, verbose_name='member')),
            ],
            options={
                'verbose_name': 'Group Membership',
                'verbose_name_plural': 'Group Memberships',
                'ordering': ['-joined_at'],
            },
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['is_active', 'is_open'], name='group_group_is_acti_e29fd7_idx'),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['leader'], name='group_group_leader__2b6470_idx'),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['created_at'], name='group_group_created_49f901_idx'),
        ),
        migrations.AddIndex(
            model_name='groupmembership',
            index=models.Index(fields=['group', 'status'], name='group_group_group_i_2f8de9_idx'),
        ),
        migrations.AddIndex(
            model_name='groupmembership',
            index=models.Index(fields=['user', 'status'], name='group_group_user_id_5db942_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='groupmembership',
            unique_together={('group', 'user')},
        ),
    ]
