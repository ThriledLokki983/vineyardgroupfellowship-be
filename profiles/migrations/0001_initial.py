# Generated by Django 5.2.7 on 2025-10-29 06:43

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ProfilePhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(blank=True, help_text='Profile photo (max 2MB)', null=True, upload_to='profile_photos/%Y/%m/')),
                ('thumbnail', models.ImageField(blank=True, help_text='Auto-generated thumbnail (150x150)', null=True, upload_to='profile_thumbnails/%Y/%m/')),
                ('photo_filename', models.CharField(blank=True, max_length=255, verbose_name='original filename')),
                ('photo_content_type', models.CharField(blank=True, max_length=50, verbose_name='content type')),
                ('photo_size_bytes', models.PositiveIntegerField(blank=True, null=True, verbose_name='file size in bytes')),
                ('photo_visibility', models.CharField(choices=[('private', 'Private - Only me'), ('supporters', 'Supporters only'), ('community', 'Community members'), ('public', 'Public')], default='community', max_length=20, verbose_name='photo visibility')),
                ('photo_moderation_status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('flagged', 'Flagged for Review')], default='pending', max_length=20, verbose_name='moderation status')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='uploaded at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile_photo', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profile Photo',
                'verbose_name_plural': 'Profile Photos',
                'db_table': 'profiles_profile_photo',
            },
        ),
        migrations.CreateModel(
            name='UserProfileBasic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(blank=True, help_text='Optional public name shown to other users', max_length=50, verbose_name='display name')),
                ('bio', models.TextField(blank=True, help_text='Optional short description about yourself', max_length=1500, verbose_name='bio')),
                ('timezone', models.CharField(default='UTC', help_text='User timezone for date/time display', max_length=50, verbose_name='timezone')),
                ('profile_visibility', models.CharField(choices=[('private', 'Private'), ('community', 'Community Only'), ('public', 'Public')], default='private', max_length=20, verbose_name='profile visibility')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='basic_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile (Basic)',
                'verbose_name_plural': 'User Profiles (Basic)',
                'db_table': 'profiles_user_profile_basic',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProfileCompletenessTracker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_completion_percentage', models.PositiveIntegerField(default=0, help_text='Overall profile completion percentage (0-100)')),
                ('completion_level', models.CharField(choices=[('minimal', 'Minimal - Basic account setup'), ('basic', 'Basic - Essential information provided'), ('standard', 'Standard - Good profile coverage'), ('comprehensive', 'Comprehensive - Detailed profile'), ('complete', 'Complete - All optional fields filled')], default='minimal', help_text='Current completion level based on percentage', max_length=20)),
                ('basic_info_score', models.PositiveIntegerField(default=0)),
                ('contact_info_score', models.PositiveIntegerField(default=0)),
                ('recovery_info_score', models.PositiveIntegerField(default=0)),
                ('preferences_score', models.PositiveIntegerField(default=0)),
                ('profile_media_score', models.PositiveIntegerField(default=0)),
                ('has_basic_profile_badge', models.BooleanField(default=False)),
                ('has_verified_email_badge', models.BooleanField(default=False)),
                ('has_recovery_goals_badge', models.BooleanField(default=False)),
                ('has_comprehensive_profile_badge', models.BooleanField(default=False)),
                ('last_calculated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile_completeness', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profile Completeness Tracker',
                'verbose_name_plural': 'Profile Completeness Trackers',
                'db_table': 'profiles_completeness_tracker',
                'indexes': [models.Index(fields=['user'], name='profiles_co_user_id_16c5d0_idx'), models.Index(fields=['completion_level'], name='profiles_co_complet_1d61e4_idx'), models.Index(fields=['overall_completion_percentage'], name='profiles_co_overall_8861f9_idx')],
            },
        ),
    ]
