# Generated by Django 5.2.7 on 2025-10-30 09:58

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(help_text='Required. Enter a valid email address.', max_length=254, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('email_verified', models.BooleanField(default=False, help_text="Whether the user's email has been verified.")),
                ('email_verified_at', models.DateTimeField(blank=True, help_text='Timestamp when email was verified.', null=True)),
                ('username', models.CharField(help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True)),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, help_text='Number of consecutive failed login attempts.')),
                ('locked_until', models.DateTimeField(blank=True, help_text='Account locked until this timestamp.', null=True)),
                ('password_changed_at', models.DateTimeField(auto_now_add=True, help_text='When password was last changed.')),
                ('terms_accepted_at', models.DateTimeField(blank=True, help_text='When user accepted terms of service.', null=True)),
                ('privacy_policy_accepted_at', models.DateTimeField(blank=True, help_text='When user accepted privacy policy.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('login_success', 'Successful Login'), ('login_failure', 'Failed Login'), ('logout', 'Logout'), ('password_change', 'Password Change'), ('password_reset_request', 'Password Reset Request'), ('password_reset_complete', 'Password Reset Complete'), ('email_verification', 'Email Verification'), ('account_locked', 'Account Locked'), ('account_unlocked', 'Account Unlocked'), ('token_refresh', 'Token Refresh'), ('session_terminated', 'Session Terminated'), ('security_event', 'Security Event')], max_length=50)),
                ('description', models.TextField(help_text='Detailed event description')),
                ('ip_address', models.GenericIPAddressField(null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('session_id', models.CharField(blank=True, max_length=40)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('success', models.BooleanField(help_text='Whether the action was successful')),
                ('risk_level', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk'), ('critical', 'Critical Risk')], default='low', max_length=20)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional event-specific data')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'auth_audit_log',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='EmailVerificationToken',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token', models.CharField(max_length=255, unique=True)),
                ('email', models.EmailField(help_text='Email address being verified (in case of email change)', max_length=254)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('is_used', models.BooleanField(default=False)),
                ('ip_address', models.GenericIPAddressField(help_text='IP address where token was requested', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_verification_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'auth_email_verification_token',
            },
        ),
        migrations.CreateModel(
            name='PasswordHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('password_hash', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'auth_password_history',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('token', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('is_used', models.BooleanField(default=False)),
                ('ip_address', models.GenericIPAddressField(help_text='IP address where token was requested', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent where token was requested')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='password_reset_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'auth_password_reset_token',
            },
        ),
        migrations.CreateModel(
            name='TokenBlacklist',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('jti', models.CharField(help_text='JWT ID (jti claim) of the blacklisted token', max_length=255, unique=True)),
                ('token_type', models.CharField(choices=[('access', 'Access Token'), ('refresh', 'Refresh Token')], max_length=20)),
                ('blacklisted_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='When the token would have naturally expired')),
                ('reason', models.CharField(choices=[('logout', 'User Logout'), ('password_change', 'Password Changed'), ('security_breach', 'Security Breach'), ('admin_action', 'Admin Action'), ('token_rotation', 'Token Rotation')], default='logout', max_length=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blacklisted_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'auth_token_blacklist',
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40, unique=True, verbose_name='session key')),
                ('refresh_token_jti', models.CharField(blank=True, help_text='JWT ID for token blacklisting.', max_length=255, verbose_name='refresh token JTI')),
                ('device_name', models.CharField(blank=True, help_text='User-provided device name (e.g., "iPhone", "Work Laptop").', max_length=100, verbose_name='device name')),
                ('device_fingerprint', models.CharField(blank=True, help_text='Generated device fingerprint for security tracking.', max_length=255, verbose_name='device fingerprint')),
                ('user_agent', models.TextField(blank=True, verbose_name='user agent')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP address')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='city')),
                ('country', models.CharField(blank=True, max_length=100, verbose_name='country')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether this session has been verified via 2FA.', verbose_name='is verified')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('last_activity_at', models.DateTimeField(auto_now=True, verbose_name='last activity at')),
                ('last_rotation_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Track token rotations for security monitoring.', verbose_name='last rotation at')),
                ('expires_at', models.DateTimeField(verbose_name='expires at')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addictfree_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Session',
                'verbose_name_plural': 'User Sessions',
                'db_table': 'auth_user_session',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='auth_user_email_ece7f7_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='auth_user_usernam_f2740e_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email_verified'], name='auth_user_email_v_2019f3_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='auth_user_created_2cecd0_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['user', 'timestamp'], name='auth_audit__user_id_2f34c9_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['event_type', 'timestamp'], name='auth_audit__event_t_ed572c_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['ip_address', 'timestamp'], name='auth_audit__ip_addr_6012dc_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['risk_level', 'timestamp'], name='auth_audit__risk_le_2c4ebe_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['success', 'timestamp'], name='auth_audit__success_ef761e_idx'),
        ),
        migrations.AddIndex(
            model_name='emailverificationtoken',
            index=models.Index(fields=['token'], name='auth_email__token_8cba8c_idx'),
        ),
        migrations.AddIndex(
            model_name='emailverificationtoken',
            index=models.Index(fields=['user'], name='auth_email__user_id_02ea99_idx'),
        ),
        migrations.AddIndex(
            model_name='emailverificationtoken',
            index=models.Index(fields=['expires_at'], name='auth_email__expires_a1c024_idx'),
        ),
        migrations.AddIndex(
            model_name='emailverificationtoken',
            index=models.Index(fields=['is_used'], name='auth_email__is_used_04f124_idx'),
        ),
        migrations.AddIndex(
            model_name='passwordhistory',
            index=models.Index(fields=['user', 'created_at'], name='auth_passwo_user_id_fb4a85_idx'),
        ),
        migrations.AddIndex(
            model_name='passwordresettoken',
            index=models.Index(fields=['token'], name='auth_passwo_token_ceb1cb_idx'),
        ),
        migrations.AddIndex(
            model_name='passwordresettoken',
            index=models.Index(fields=['user'], name='auth_passwo_user_id_87dc7f_idx'),
        ),
        migrations.AddIndex(
            model_name='passwordresettoken',
            index=models.Index(fields=['expires_at'], name='auth_passwo_expires_1116e7_idx'),
        ),
        migrations.AddIndex(
            model_name='passwordresettoken',
            index=models.Index(fields=['is_used'], name='auth_passwo_is_used_14d80b_idx'),
        ),
        migrations.AddIndex(
            model_name='tokenblacklist',
            index=models.Index(fields=['jti'], name='auth_token__jti_0438eb_idx'),
        ),
        migrations.AddIndex(
            model_name='tokenblacklist',
            index=models.Index(fields=['user'], name='auth_token__user_id_656014_idx'),
        ),
        migrations.AddIndex(
            model_name='tokenblacklist',
            index=models.Index(fields=['blacklisted_at'], name='auth_token__blackli_79c845_idx'),
        ),
        migrations.AddIndex(
            model_name='tokenblacklist',
            index=models.Index(fields=['expires_at'], name='auth_token__expires_e93997_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['user', 'is_active'], name='auth_user_s_user_id_be2038_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['session_key'], name='auth_user_s_session_939fd1_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['refresh_token_jti'], name='auth_user_s_refresh_ef75f9_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['device_fingerprint'], name='auth_user_s_device__8da14d_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['expires_at'], name='auth_user_s_expires_c416bc_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['last_rotation_at'], name='auth_user_s_last_ro_4c38aa_idx'),
        ),
    ]
