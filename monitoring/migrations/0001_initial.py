# Generated by Django 5.2.7 on 2025-10-22 14:24

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='DatabaseQueryMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query_type', models.CharField(help_text='Type of query (SELECT, INSERT, UPDATE, DELETE, etc.)', max_length=50)),
                ('table_name', models.CharField(blank=True, help_text='Primary table involved in the query', max_length=100)),
                ('execution_time', models.DecimalField(decimal_places=4, help_text='Query execution time in milliseconds', max_digits=10)),
                ('rows_affected', models.PositiveIntegerField(blank=True, help_text='Number of rows affected by the query', null=True)),
                ('query_hash', models.CharField(help_text='Hash of the query for identification', max_length=64)),
                ('endpoint_path', models.CharField(blank=True, help_text='API endpoint that triggered this query', max_length=500)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='When this query was executed')),
            ],
            options={
                'verbose_name': 'Database Query Metrics',
                'verbose_name_plural': 'Database Query Metrics',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['-execution_time'], name='monitoring__executi_66fd59_idx'), models.Index(fields=['query_type', '-timestamp'], name='monitoring__query_t_db9926_idx'), models.Index(fields=['-timestamp'], name='monitoring__timesta_703d77_idx')],
            },
        ),
        migrations.CreateModel(
            name='EndpointMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endpoint_path', models.CharField(help_text='API endpoint path (e.g., /api/v1/users/)', max_length=500)),
                ('http_method', models.CharField(help_text='HTTP method (GET, POST, etc.)', max_length=10)),
                ('time_window_start', models.DateTimeField(help_text='Start of the time window for these metrics')),
                ('time_window_end', models.DateTimeField(help_text='End of the time window for these metrics')),
                ('request_count', models.PositiveIntegerField(default=0, help_text='Total number of requests in this time window')),
                ('error_count', models.PositiveIntegerField(default=0, help_text='Number of requests that resulted in errors (4xx, 5xx)')),
                ('avg_response_time', models.DecimalField(decimal_places=2, help_text='Average response time in milliseconds', max_digits=10)),
                ('min_response_time', models.DecimalField(decimal_places=2, help_text='Minimum response time in milliseconds', max_digits=10)),
                ('max_response_time', models.DecimalField(decimal_places=2, help_text='Maximum response time in milliseconds', max_digits=10)),
                ('p95_response_time', models.DecimalField(decimal_places=2, help_text='95th percentile response time in milliseconds', max_digits=10)),
                ('status_codes', models.JSONField(default=dict, help_text='Distribution of HTTP status codes {code: count}')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this metrics record was created')),
            ],
            options={
                'verbose_name': 'Endpoint Metrics',
                'verbose_name_plural': 'Endpoint Metrics',
                'ordering': ['-time_window_start'],
                'indexes': [models.Index(fields=['endpoint_path', '-time_window_start'], name='monitoring__endpoin_8b882d_idx'), models.Index(fields=['-time_window_start'], name='monitoring__time_wi_d558a8_idx')],
                'unique_together': {('endpoint_path', 'http_method', 'time_window_start')},
            },
        ),
        migrations.CreateModel(
            name='HealthCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_type', models.CharField(help_text='Type of health check (database, cache, external_api, etc.)', max_length=50)),
                ('status', models.CharField(choices=[('healthy', 'Healthy'), ('degraded', 'Degraded'), ('unhealthy', 'Unhealthy')], help_text='Status of the health check', max_length=20)),
                ('response_time', models.DecimalField(decimal_places=2, help_text='Response time for the health check in milliseconds', max_digits=10)),
                ('details', models.JSONField(blank=True, default=dict, help_text='Additional details about the health check')),
                ('error_message', models.TextField(blank=True, help_text='Error message if the health check failed')),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='When this health check was performed')),
            ],
            options={
                'verbose_name': 'Health Check',
                'verbose_name_plural': 'Health Checks',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['check_type', '-timestamp'], name='monitoring__check_t_1f9ddb_idx'), models.Index(fields=['status', '-timestamp'], name='monitoring__status_73e334_idx'), models.Index(fields=['-timestamp'], name='monitoring__timesta_63b962_idx')],
            },
        ),
        migrations.CreateModel(
            name='PerformanceMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('request_response', 'Request/Response'), ('database_query', 'Database Query'), ('business_metric', 'Business Metric'), ('system_health', 'System Health'), ('error_rate', 'Error Rate')], help_text='Type of metric being tracked', max_length=50)),
                ('name', models.CharField(help_text='Name/identifier for this metric', max_length=200)),
                ('value', models.DecimalField(decimal_places=4, help_text='Numeric value of the metric', max_digits=12)),
                ('unit', models.CharField(help_text='Unit of measurement (ms, count, bytes, etc.)', max_length=20)),
                ('context', models.JSONField(blank=True, default=dict, help_text='Additional context data for this metric')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='When this metric was recorded')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Performance Metric',
                'verbose_name_plural': 'Performance Metrics',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['metric_type', '-timestamp'], name='monitoring__metric__c04fff_idx'), models.Index(fields=['name', '-timestamp'], name='monitoring__name_01fce3_idx'), models.Index(fields=['-timestamp'], name='monitoring__timesta_d67068_idx')],
            },
        ),
    ]
